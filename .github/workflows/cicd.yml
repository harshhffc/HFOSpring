name: Build & Deploy

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    name: Build & Deploy Spring Boot App
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Enable SSH access
      - name: Enable SSH Access
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr 0.0.0.0/0

      # Step 4: Get current date and time in IST
      - name: Get current date and time in IST
        id: vars
        run: |
          IST_DATE=$(TZ='Asia/Kolkata' date +'%Y%m%d%H%M%S')
          echo "TAG=$IST_DATE" >> $GITHUB_ENV

      # Step 5: Build Docker Image
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile  # Specify if your Dockerfile is not named 'Dockerfile'
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/hfo:${{ env.TAG }}

      # Step 6: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 7: Push Docker Image to Docker Hub
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/hfo:${{ env.TAG }}

      # Step 8: Deploy to Server
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/hfo:${{ env.TAG }}
            docker stop hfospring || true
            docker rm hfospring || true
            docker run -d --name hfospring -p 8447:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/hfo:${{ env.TAG }}

      # Step 9: Revoke SSH access
      - name: Revoke SSH Access
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr 0.0.0.0/0
